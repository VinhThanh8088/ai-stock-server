# -*- coding: utf-8 -*-
import pandas as pd
import pandas_ta as ta
from vnstock import Vnstock
import numpy as np
import xgboost as xgb
from statsmodels.tsa.arima.model import ARIMA
from pandas.tseries.offsets import BDay
import warnings
import logging
from flask import Flask, jsonify, request
from flask_cors import CORS
import json

# C·∫•u h√¨nh ƒë·ªÉ ·∫©n c√°c c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt
logging.getLogger("vnstock.common.data.data_explorer").setLevel(logging.WARNING)
warnings.filterwarnings('ignore')

# Kh·ªüi t·∫°o Web Server
app = Flask(__name__)
# Cho ph√©p ·ª©ng d·ª•ng web t·ª´ m·ªçi n∆°i c√≥ th·ªÉ g·ªçi ƒë·∫øn server n√†y
CORS(app)

# D√πng ƒë·ªÉ cache (l∆∞u tr·ªØ) c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ƒë·ªÉ kh√¥ng ph·∫£i hu·∫•n luy·ªán l·∫°i m·ªói l·∫ßn g·ªçi
# ƒêi·ªÅu n√†y gi√∫p tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi ƒë√°ng k·ªÉ
model_cache = {}

def phan_tich_va_du_bao_ai(symbol: str):
    """
    H√†m n√†y ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh t·ª´ m√£ g·ªëc c·ªßa b·∫°n.
    Thay v√¨ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì, n√≥ s·∫Ω tr·∫£ v·ªÅ d·ªØ li·ªáu d·∫°ng JSON
    ƒë·ªÉ ·ª©ng d·ª•ng web c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c.
    """
    symbol = symbol.upper()
    print(f"üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch cho m√£: {symbol} üöÄ")

    # 1. T·∫¢I D·ªÆ LI·ªÜU L·ªäCH S·ª¨ C·ªî PHI·∫æU V√Ä VN-INDEX
    print("[1/5] üì• ƒêang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠...")
    start_date = '2010-01-01'
    end_date = pd.Timestamp.today().strftime('%Y-%m-%d')
    
    df = Vnstock().stock(symbol=symbol).quote.history(start=start_date, end=end_date)
    if df.empty:
        raise ValueError(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ {symbol}")
    
    df_index = Vnstock().stock(symbol='VNINDEX').quote.history(start=start_date, end=end_date)
    
    df['time'] = pd.to_datetime(df['time'])
    df.set_index('time', inplace=True)
    df_index['time'] = pd.to_datetime(df_index['time'])
    df_index.set_index('time', inplace=True)

    # 2. T√çNH TO√ÅN CH·ªà B√ÅO V√Ä T√çCH H·ª¢P D·ªÆ LI·ªÜU
    print("[2/5] üõ†Ô∏è  ƒêang t√≠nh to√°n ch·ªâ b√°o v√† t√≠ch h·ª£p d·ªØ li·ªáu...")
    df_index.ta.rsi(length=14, append=True); df_index.ta.sma(length=50, append=True)
    df_index.rename(columns={'close': 'vnindex_close', 'RSI_14': 'vnindex_rsi', 'SMA_50': 'vnindex_sma50'}, inplace=True)
    df = df.join(df_index[['vnindex_close', 'vnindex_rsi', 'vnindex_sma50']])

    df.ta.sma(length=20, append=True); df.ta.sma(length=50, append=True)
    df.ta.rsi(length=14, append=True); df.ta.macd(fast=12, slow=26, signal=9, append=True)
    df.ta.bbands(length=20, append=True)
    df.dropna(inplace=True)
    
    df_for_prediction = df.copy()

    # 3. HU·∫§N LUY·ªÜN M√î H√åNH AI (HO·∫∂C L·∫§Y T·ª™ CACHE)
    if symbol in model_cache:
        print(f"[3/5] üß† L·∫•y m√¥ h√¨nh AI Giao D·ªãch (Ng√†y) t·ª´ cache cho {symbol}...")
        model_xgb_daily = model_cache[symbol]
    else:
        print(f"[3/5] üß† ƒêang hu·∫•n luy·ªán AI Giao D·ªãch (khung ng√†y) cho {symbol}...")
        future_window = 10
        df['price_change_pct'] = (df['close'].shift(-future_window) - df['close']) / df['close'] * 100
        change_threshold = 5.0
        df['Signal'] = np.where(df['price_change_pct'] > change_threshold, 1, np.where(df['price_change_pct'] < -change_threshold, -1, 0))
        df.dropna(subset=['price_change_pct', 'Signal'], inplace=True)

        features = ['open', 'high', 'low', 'close', 'volume', 'SMA_20', 'SMA_50', 'RSI_14', 'MACD_12_26_9', 'MACDs_12_26_9', 'MACDh_12_26_9', 'BBL_20_2.0', 'BBM_20_2.0', 'BBU_20_2.0', 'vnindex_close', 'vnindex_rsi', 'vnindex_sma50']
        X = df[features]
        y = df['Signal']
        model_xgb_daily = xgb.XGBClassifier(objective='multi:softmax', num_class=3, eval_metric='mlogloss', use_label_encoder=False, n_estimators=150, learning_rate=0.05, max_depth=4, random_state=42)
        model_xgb_daily.fit(X, y.map({-1: 0, 0: 1, 1: 2}))
        model_cache[symbol] = model_xgb_daily # L∆∞u m√¥ h√¨nh v√†o cache
        print(f"‚úÖ Hu·∫•n luy·ªán v√† l∆∞u v√†o cache th√†nh c√¥ng.")

    # 4. D·ª∞ B√ÅO V√Ä T·ªîNG H·ª¢P KHUY·∫æN NGH·ªä
    print("[4/5] üì£ ƒêang t·ªïng h·ª£p khuy·∫øn ngh·ªã...")
    features_pred = ['open', 'high', 'low', 'close', 'volume', 'SMA_20', 'SMA_50', 'RSI_14', 'MACD_12_26_9', 'MACDs_12_26_9', 'MACDh_12_26_9', 'BBL_20_2.0', 'BBM_20_2.0', 'BBU_20_2.0', 'vnindex_close', 'vnindex_rsi', 'vnindex_sma50']
    latest_data = df_for_prediction[features_pred].iloc[-1:]
    
    prediction_mapped = model_xgb_daily.predict(latest_data)[0]
    ai_recommendation = {0: 'B√ÅN', 1: 'GI·ªÆ', 2: 'MUA'}[prediction_mapped]
    
    df_for_prediction['AI_Signal'] = model_xgb_daily.predict(df_for_prediction[features_pred]).map({0: -1, 1: 0, 2: 1})

    # Ch·∫°y d·ª± b√°o ARIMA
    forecast_price = None
    try:
        print("üîÆ ƒêang ch·∫°y m√¥ h√¨nh d·ª± b√°o gi√° ng√†y mai (ARIMA)...")
        model_arima = ARIMA(df_for_prediction['close'].tail(200), order=(5,1,0)) # D√πng 200 ƒëi·ªÉm d·ªØ li·ªáu cu·ªëi cho nhanh
        model_arima_fit = model_arima.fit()
        forecast_price = model_arima_fit.forecast(steps=1).iloc[0]
    except Exception as arima_error:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch·∫°y m√¥ h√¨nh ARIMA. L·ªói: {arima_error}")

    # 5. CHU·∫®N B·ªä D·ªÆ LI·ªÜU G·ª¨I V·ªÄ
    print("[5/5] üì¶ ƒêang ƒë√≥ng g√≥i d·ªØ li·ªáu k·∫øt qu·∫£...")
    
    # Chuy·ªÉn ƒë·ªïi index th√†nh chu·ªói string ƒë·ªÉ g·ª≠i qua JSON
    df_for_prediction.index = df_for_prediction.index.strftime('%Y-%m-%d')
    
    # Ch·ªâ l·∫•y c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng g·ª≠i ƒëi
    chart_data = df_for_prediction[[
        'close', 'volume', 'SMA_20', 'SMA_50', 'RSI_14', 'MACD_12_26_9', 
        'MACDs_12_26_9', 'MACDh_12_26_9', 'AI_Signal', 'vnindex_close'
    ]].to_dict(orient='index')

    # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng d·ªØ li·ªáu cho Chart.js
    labels = list(chart_data.keys())
    final_data = {
        'labels': labels,
        'datasets': {key: [d[key] if d and key in d else None for d in chart_data.values()] for key in chart_data[labels[0]].keys()}
    }

    last_close_price = latest_data['close'].values[0]

    return {
        "symbol": symbol,
        "last_price": last_close_price,
        "recommendation": ai_recommendation,
        "forecast_price": forecast_price,
        "chart_data": final_data,
    }

# ƒê√¢y l√† "c·ªïng" API m√† ·ª©ng d·ª•ng web s·∫Ω g·ªçi t·ªõi
@app.route('/analyze/<symbol>', methods=['GET'])
def analyze_stock(symbol):
    try:
        result = phan_tich_va_du_bao_ai(symbol)
        # Chuy·ªÉn ƒë·ªïi c√°c ki·ªÉu d·ªØ li·ªáu c·ªßa numpy th√†nh ki·ªÉu c·ªßa Python ƒë·ªÉ jsonify ho·∫°t ƒë·ªông
        result['last_price'] = float(result['last_price'])
        if result['forecast_price'] is not None:
            result['forecast_price'] = float(result['forecast_price'])
        
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        return jsonify({"error": str(e)}), 500

# Ch·∫°y server khi t·ªáp n√†y ƒë∆∞·ª£c th·ª±c thi
if __name__ == '__main__':
    # port=5000 l√† c·ªïng m·∫∑c ƒë·ªãnh, c√≥ th·ªÉ thay ƒë·ªïi
    app.run(host='0.0.0.0', port=5000)
